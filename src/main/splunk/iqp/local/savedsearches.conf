[dlq_7_tage]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -7d@d
cron_schedule = 34 16 * * *
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["tsr","series","PruefumfangName","week","inline","pruefumfangName"]
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart.stackMode = stacked100
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = index=apdm sourcetype="apdm_test_result" werk="*w06*"\
| eval cat_test=if(inline=="0","offline",if(errorCount=="0","inline_no_error","inline_error")) \
| stats values(cat_test) as cat_test, max(_time) as day_of_last_test by shortVIN pruefumfangName\
| eval day_of_last_test=strftime(day_of_last_test,"%Y-%m-%d")\
| eval cat_fzg=if(cat_test=="inline_no_error" AND NOT cat_test=="inline_error","first_pass",if(cat_test=="inline_no_error","rework_in_line","offline_rework")) \
| stats count by cat_fzg pruefumfangName day_of_last_test | eval {cat_fzg}=count | stats sum(first_pass) as first_pass, sum(rework_in_line) as rework_in_line, sum(offline_rework) as offline_rework by pruefumfangName day_of_last_test

[dlq_4_wochen]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
cron_schedule = 34 16 * * *
dispatch.earliest_time = -4w@w0
dispatch.latest_time = now
display.events.fields = ["tsr","series","PruefumfangName","week","inline","pruefumfangName"]
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart.stackMode = stacked100
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = index=apdm sourcetype="apdm_test_result" werk="*w06*"\
| eval cat_test=if(inline=="0","offline",if(errorCount=="0","inline_no_error","inline_error")) \
| stats values(cat_test) as cat_test, max(_time) as week_of_last_test by shortVIN pruefumfangName\
| eval week_of_last_test=strftime(week_of_last_test,"%G-CW%V")\
| eval cat_fzg=if(cat_test=="inline_no_error" AND NOT cat_test=="inline_error","first_pass",if(cat_test=="inline_no_error","rework_in_line","offline_rework")) \
| stats count by cat_fzg pruefumfangName week_of_last_test | eval {cat_fzg}=count | stats sum(first_pass) as first_pass, sum(rework_in_line) as rework_in_line, sum(offline_rework) as offline_rework by pruefumfangName week_of_last_test

[collect_order_data]
action.email.useNSSubject = 1
action.kvstore = 1
action.kvstore.param.app = iqp
action.kvstore.param.collection = order_data
action.kvstore.param.key_column = shortVIN
alert.digest_mode = 0
alert.severity = 1
alert.suppress = 0
alert.track = 0
cron_schedule = * * * * *
dispatch.earliest_time = rt
dispatch.latest_time = rt
display.events.maxLines = 20
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = sankey_diagram_app.sankey_diagram
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = index=apdm sourcetype=apdm_order_data NOT vehicleState=6000\
| table shortVIN,werk,series,vehicleType,integrationLevel,engineSeries,saCode,wheelAlignmentCode,vehicleState,_time

[collect_order_data_current]
action.email.useNSSubject = 1
action.lookup = 1
action.lookup.filename = order_data_current.csv
alert.track = 0
cron_schedule = 15 * * * *
dispatch.earliest_time = -2mon
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","vehicleState","vinShort","integrationLevel","fehlerart","fehlerlage","fehlerort","taetigkeit","na_bemerkung","pr_bemerkung","NA Nacharbeitsdauer","indexed_on","wheelAlignmentCode","dtcCode","dtcTime"]
display.events.type = raw
display.general.enablePreview = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = viz_jstree_app.jstree
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
schedule_window = auto
search = | tstats summariesonly=true\
    latest(OrderData.header) as header\
    latest(OrderData.werk) as werk\
    latest(OrderData.series) as series\
    latest(OrderData.vehicleType) as vehicleType\
    latest(OrderData.integrationLevel) as integrationLevel\
    latest(OrderData.engineSeries) as engineSeries\
    latest(OrderData.saCodeString) as saCode\
    latest(OrderData.wheelAlignmentCode) as wheelAlignmentCode\
    latest(OrderData.vehicleState) as vehicleState\
    latest(OrderData.time) as _time\
    latest(OrderData.hybridType) as hybridType\
  from datamodel=APDM_OrderData_Events\
  groupby OrderData.shortVIN\
| rename OrderData.* as *\
| eval saCode = split(saCode, " ")\
`comment("Behalte nur Daten von Fahrzeugen, die den header I004 haben oder die vor weniger als 4 Tagen den header I007 bekommen haben")`\
| addinfo | eval latest_i007_time=info_max_time-4*24*60*60 | where header="I004" OR (header="I007" AND tonumber(_time)>latest_i007_time) | fields - header info_* latest_i007_time

[collect_f2time]
action.email.useNSSubject = 1
action.kvstore = 1
action.kvstore.param.app = iqp
action.kvstore.param.collection = order_data
action.kvstore.param.key_column = shortVIN
alert.digest_mode = 0
alert.severity = 1
alert.suppress = 0
alert.track = 0
cron_schedule = * * * * *
dispatch.earliest_time = rt
dispatch.latest_time = rt
display.events.maxLines = 20
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = sankey_diagram_app.sankey_diagram
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = index=apdm sourcetype=apdm_order_data vehicleState=6000\
| table shortVIN,vehicleState,_time,f2Time

[apdm_historie_7_tage]
action.email.reportServerEnabled = 0
alert.track = 0
cron_schedule = 0 4 * * *
dispatch.earliest_time = -7d
display.events.fields = ["tsr","series","PruefumfangName","week","inline","pruefumfangName"]
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = | tstats dc(TestStepResult.shortVIN) AS shortVIN_count\
    from datamodel=APDM_Fehler\
  where \
     (nodename = TestStepResult)\
     (TestStepResult.testStepResult=NOK)\
     (TestStepResult.errorCount>0)\
     (TestStepResult.systemName="Cascade")\
     \
     \
\
   groupby TestStepResult.pruefumfangName, TestStepResult.testStepName, TestStepResult.description, TestStepResult.param1, TestStepResult.ErrorCodeDec,  TestStepResult.resultData, TestStepResult.werk, TestStepResult.inline  _time span=1d\
\
| rename TestStepResult.pruefumfangName AS pruefumfangName, TestStepResult.testStepName AS testStepName, TestStepResult.description AS description, TestStepResult.param1 AS param1, TestStepResult.ErrorCodeDec AS ErrorCodeDec,  TestStepResult.resultData AS resultData, TestStepResult.werk AS werk, TestStepResult.inline as inline, _time as header\
\
| eval header=strftime('header',"%Y-%m-%d")." ".if(inline="true","I","O")\
| eval {header}=shortVIN_count \
| stats values(20*) AS 20* by pruefumfangName testStepName description param1 ErrorCodeDec resultData werk

[apdm_historie_4_wochen]
action.email.reportServerEnabled = 0
alert.track = 0
cron_schedule = 2 4 * * *
dispatch.earliest_time = -4w@w0
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = | tstats dc(TestStepResult.shortVIN) AS shortVIN_count\
    from datamodel=APDM_Fehler\
  where \
     (nodename = TestStepResult)\
     (TestStepResult.testStepResult=NOK)\
     (TestStepResult.errorCount>0)\
     (TestStepResult.systemName="Cascade")\
     \
     \
\
   groupby TestStepResult.pruefumfangName, TestStepResult.testStepName, TestStepResult.description, TestStepResult.param1, TestStepResult.ErrorCodeDec,  TestStepResult.resultData, TestStepResult.werk, TestStepResult.inline  _time span=7d\
\
| rename TestStepResult.pruefumfangName AS pruefumfangName, TestStepResult.testStepName AS testStepName, TestStepResult.description AS description, TestStepResult.param1 AS param1, TestStepResult.ErrorCodeDec AS ErrorCodeDec,  TestStepResult.resultData AS resultData, TestStepResult.werk AS werk, TestStepResult.inline as inline, _time as header\
\
| eval header=strftime('header',"%G-CW%V")." ".if(inline="true","I","O")\
| eval {header}=shortVIN_count \
| stats values(20*) AS 20* by pruefumfangName testStepName description param1 ErrorCodeDec resultData werk\


[unique_order_data]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = 0
display.visualizations.show = 0
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = | tstats \
    latest(_time) as _time\
    latest(OrderData.airConCode) AS airConCode\
    latest(OrderData.airConditioningQuantityCode) AS airConditioningQuantityCode\
    latest(OrderData.author) AS author\
    latest(OrderData.bodyLayout) AS bodyLayout\
    latest(OrderData.bodyType) AS bodyType\
    latest(OrderData.c1Code) AS c1Code\
    latest(OrderData.c2Code) AS c2Code\
    latest(OrderData.c3Code) AS c3Code\
    latest(OrderData.clientAdress) AS clientAdress\
    latest(OrderData.codingLocation) AS codingLocation\
    latest(OrderData.codingTime) AS codingTime\
    latest(OrderData.colourCode) AS colourCode\
    latest(OrderData.comment) AS comment\
    latest(OrderData.countryVariant) AS countryVariant\
    latest(OrderData.creationTime) AS creationTime\
    latest(OrderData.customerId) AS customerId\
    latest(OrderData.d1Code) AS d1Code\
    latest(OrderData.d2Code) AS d2Code\
    latest(OrderData.d3Code) AS d3Code\
    latest(OrderData.d4Code) AS d4Code\
    latest(OrderData.date) AS date\
    latest(OrderData.driveConfiguration) AS driveConfiguration\
    latest(OrderData.driveType) AS driveType\
    latest(OrderData.engineCalibrationData) AS engineCalibrationData\
    latest(OrderData.engineDerivative) AS engineDerivative\
    latest(OrderData.engineFamily) AS engineFamily\
    latest(OrderData.engineNumber) AS engineNumber\
    latest(OrderData.engineSeries) AS engineSeries\
    latest(OrderData.engineSize) AS engineSize\
    latest(OrderData.exhaustType) AS exhaustType\
    latest(OrderData.f2Time) AS f2Time\
    latest(OrderData.fabricCode) AS fabricCode\
    latest(OrderData.firstCreationDate) AS firstCreationDate\
    latest(OrderData.fuelCode) AS fuelCode\
    latest(OrderData.fuelPreparationType) AS fuelPreparationType\
    latest(OrderData.fuelQuantityCode) AS fuelQuantityCode\
    latest(OrderData.fzs) AS fzs\
    latest(OrderData.gearboxType) AS gearboxType\
    latest(OrderData.header) AS header\
    latest(OrderData.headlightCode) AS headlightCode\
    latest(OrderData.hybridType) AS hybridType\
    latest(OrderData.integrationLevel) AS integrationLevel\
    latest(OrderData.latestCreationDate) AS latestCreationDate\
    latest(OrderData.longVIN) AS longVIN\
    latest(OrderData.motorSport) AS motorSport\
    latest(OrderData.numberOfDoors) AS numberOfDoors\
    latest(OrderData.orderId) AS orderId\
    latest(OrderData.plantId) AS plantId\
    latest(OrderData.productType) AS productType\
    latest(OrderData.radiatorQuantityCode) AS radiatorQuantityCode\
    latest(OrderData.refSchema) AS refSchema\
    latest(OrderData.saCodeString) AS saCode\
    latest(OrderData.securityVehicle) AS securityVehicle\
    latest(OrderData.sequenceNo) AS sequenceNo\
    latest(OrderData.series) AS series\
    latest(OrderData.serviceDataEWS) AS serviceDataEWS\
    latest(OrderData.servoCode) AS servoCode\
    latest(OrderData.shiftType) AS shiftType\
    latest(OrderData.sxCodeString) AS sxCode\
    latest(OrderData.timeCriteria) AS timeCriteria\
    latest(OrderData.typeKey) AS typeKey\
    latest(OrderData.vehicleState) AS vehicleState\
    latest(OrderData.vehicleType) AS vehicleType\
    latest(OrderData.werk) AS werk\
    latest(OrderData.wheelAlignmentCode) AS wheelAlignmentCode\
  from datamodel=APDM_OrderData_Events where (nodename = OrderData) groupby OrderData.shortVIN\
| rename OrderData.shortVIN as shortVIN\
| eval saCode = split(saCode, " ")\
| eval sxCode = split(sxCode, " ")

[export_apdm_data]
action.email.useNSSubject = 1
alert.track = 0
dispatchAs = user
display.events.fields = ["host","source","sourcetype","werk","orig_host","pruefumfangName","testStand","inline","resultName","resultValueDbl","resultValueStr","testStepResult","IN_AUSWERTUNG","wheelAlignmentCode","shortVIN","indextime"]
display.general.enablePreview = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = (index=apdm source=*$shortVIN$*) OR (index=ipsq) shortVIN=$shortVIN$\
 \
| reverse \
| streamstats count as version by source \
| eval source=if(sourcetype="apdm_order_data",replace(source,"(.*)(\.xml)$","\1_v"+version+"\2"),source) \
| table _time index host source sourcetype _raw\
| eval _raw=if(sourcetype="apdm_test_result",replace(replace(_raw,"(?:xmlns:py=\"http://bmw\.com/pythonExtensions\"|timestamp=\"[^\"]*\")",""),"/>\s*$",">"),_raw)\
| eval _raw=if(sourcetype="apdm_test_step_result",replace(_raw,"(?:timestamp=\"[^\"]*\"|testComment=\"[^\"]*\"|systemName=\"[^\"]*\"|source=\"[^\"]*\"|softwareVersion=\"[^\"]*\"|resultFormatVersion=\"[^\"]*\"|shortVIN=\"[^\"]*\"|FZS=\"[^\"]*\"|typeKey=\"[^\"]*\"|orderID=\"[^\"]*\"|testStand=\"[^\"]*\"|controlCriteria=\"[^\"]*\"|testDuration=\"[^\"]*\"|cycleTime=\"[^\"]*\"|errorCount=\"[^\"]*\"|complete=\"[^\"]*\"|pruefumfangName=\"[^\"]*\"|testVersion=\"[^\"]*\"|editor=\"[^\"]*\"|retryCountSummary=\"[^\"]*\"|measureType=\"[^\"]*\"|pullDownEquipment=\"[^\"]*\"|chassisCoding=\"[^\"]*\"|testTime=\"[^\"]*\"|shift=\"[^\"]*\"|optParam\d=\"[^\"]*\"|iStep=\"[^\"]*\"|apdmTestId=\"[^\"]*\"|manualFlag=\"[^\"]*\"|physicalPruefumfangName=\"[^\"]*\"|resultVariables=\"[^\"]*\"|webreporting=\"[^\"]*\")",""),_raw)\
| eval _raw=replace(_raw,"</testResult>","") \
| appendpipe [search sourcetype=apdm_test_result | rex field=_raw "resultVariables=\"(?<resultVariables>[^\"]*)\"" | eval resultVariables=replace(resultVariables,"\s*([^=]+?)=([^,]+?),","<resultVariable variableKey=\"\1\" variableValue=\"\2\"/>") | eval resultVariables=resultVariables+"</testInfo></testResult>" | rename resultVariables as _raw | eval sourcetype="resultVariables"| table index host source sourcetype _raw ]\
| eval _raw=if(sourcetype="apdm_test_result",replace(_raw,"resultVariables=\"[^\"]*\"",""),_raw)\
\
| table _time index host sourcetype source _raw\
| eval test_time=if(sourcetype="apdm_test_result",_time,null()) \
| eventstats first(test_time) as test_time by source\
| eval time=if(sourcetype="apdm_test_step_result" OR sourcetype="resultVariables",test_time,_time) | fields - test_time _time\
| eval sourcetype=if(sourcetype="apdm_test_step_result" OR sourcetype="resultVariables","apdm_test_result",sourcetype) \
\
| rename _raw as content | mvcombine delim="\r\n" content | nomv content | rename content as _raw\
| table time index host source sourcetype _raw\
| sort time


[collect_assembly_hall]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
dispatch.earliest_time = -26h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.custom.type = viz_co-occurrence_graph_app.co-occurrence_graph
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = index=apdm ASSEMBLY_HALL | table werk ASSEMBLY_HALL | rename ASSEMBLY_HALL as montagehalle | inputlookup append=true iqp_montagehallen.csv | dedup werk, montagehalle | outputlookup iqp_montagehallen.csv


[sum_spur_sturz_werte]
action.summary_index = 1
action.summary_index._name = iqp_spur_sturz_kurven_summary
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["sourcetype","systemzeit_nullpunkt_HR","param3","resultValueDbl","eventtype","host","source"]
display.events.maxLines = 20
display.general.enablePreview = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.chartHeight = 664
display.visualizations.charting.chart = scatter
display.visualizations.custom.height = 1208
display.visualizations.custom.type = viz_plotly_curvedline_app.toeChamberCurve
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = index=apdm "systemName=\"Achse\"" "resultName=\"SpurSturzKurvenWerte\""\
| join type=inner source \
[ \
  | tstats \
      count AS IS_REF\
    from datamodel=APDM_FWS.Achse \
    where (nodename = Achse.ReferenceCar) earliest=-20m\
    groupby source  summariesonly=true\
]\
| rex field=_raw "blockResult=\"(?<blockResult>[A-Za-z0-9+/=-_]+)\"" \
| lookup lkup_order_data _key AS shortVIN OUTPUT series wheelAlignmentCode local=true \
| table _time source werk shortVIN series wheelAlignmentCode testStand blockResult \
| eval \
  brlen=len(blockResult),\
  modbrlen=brlen - brlen%4,\
  blockResult=substr(blockResult, 0, modbrlen)\
| base64 field=blockResult action=decode mode=replace suppress_error=False\
| eval decRows=split(blockResult,"\x0a") \
| fields - blockResult \
| mvexpand decRows \
| eval decFields=split(decRows,"\x09") \
| fields - decRows \
| eval Umkehrpunkt=trim(mvindex(decFields,0)) \
| where Umkehrpunkt <=1 \
| eval PruefTime=trim(mvindex(decFields,1)) \
| eval SpurVL=trim(mvindex(decFields,2)) \
| eval SpurVR=trim(mvindex(decFields,3)) \
| eval SpurHL=trim(mvindex(decFields,5)) \
| eval SpurHR=trim(mvindex(decFields,6)) \
| eval SturzVL=trim(mvindex(decFields,8)) \
| eval SturzVR=trim(mvindex(decFields,9)) \
| eval SturzHL=trim(mvindex(decFields,10)) \
| eval SturzHR=trim(mvindex(decFields,11)) \
| eval SpHoeheVL=toNumber(trim(mvindex(decFields,12))) * (-1), StHoeheVL=SpHoeheVL\
| eval SpHoeheVR=toNumber(trim(mvindex(decFields,13))) * (-1), StHoeheVR=SpHoeheVR\
| eval SpHoeheHL=toNumber(trim(mvindex(decFields,14))) * (-1), StHoeheHL=SpHoeheHL\
| eval SpHoeheHR=toNumber(trim(mvindex(decFields,15))) * (-1), StHoeheHR=SpHoeheHR\
| fields - decFields \
| streamstats sum(Umkehrpunkt) as Umkehrpunkt by source \
| eval Umkehrpunkt=if(Umkehrpunkt<10, "0" + Umkehrpunkt, Umkehrpunkt)\
| sort shortVIN -Umkehrpunkt \
| eval Umkehrpunkt=shortVIN + " - " + Umkehrpunkt\
| table _time Umkehrpunkt werk shortVIN series wheelAlignmentCode testStand PruefTime SpurVL SpurVR SpurHL SpurHR SturzVL SturzVR SturzHL SturzHR SpHoeheVL SpHoeheVR SpHoeheHL SpHoeheHR StHoeheVL StHoeheVR StHoeheHL StHoeheHR

[collect_hinterachse_stand]
action.email.useNSSubject = 1
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = lkup_fws_hinterachse_anlagen.csv
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["sourcetype","systemzeit_nullpunkt_HR","param3","resultValueDbl","eventtype","host","source","testVersion"]
display.events.maxLines = 20
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.chartHeight = 664
display.visualizations.charting.chart = scatter
display.visualizations.custom.type = viz_plotly_curvedline_app.toeChamberCurve
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = index=apdm "systemName=\"Hinterachse\"" sourcetype=apdm_test_result | stats latest(testStand) AS testStand by shortVIN werk

[sum_ql_error_class_rework]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = ql_summary
alert.track = 0
cron_schedule = 20 0 * * *
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","vehicleState","vinShort","integrationLevel"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = viz_jstree_app.jstree
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
schedule_window = 15
search = | union \
[ tstats \
`comment("Alle Fehler der letzten Woche")`\
  count\
  from datamodel=APDM_Fehler\
  groupby TestStepResult.werk TestStepResult.shortVIN TestStepResult.pruefumfangName TestStepResult.testStepName TestStepResult.resultName TestStepResult.description TestStepResult.param1 TestStepResult.param2 TestStepResult.resultValueStr TestStepResult.ErrorCodeDec TestStepResult.errorText TestStepResult.adviseText TestStepResult.integrationLevel TestStepResult.series\
    prestats=false summariesonly=false\
| rename TestStepResult.* AS * \
\
`comment("Erzeuge ein einzelnes Feld, dass den Fehler beschreibt")`\
| fillnull testStepName resultName description param1 param2 resultValueStr ErrorCodeDec errorText adviseText value=""\
| eval error="{ \"testStepName\" : \"" . testStepName . "\", " ."\"resultName\" : \"" . resultName . "\", " ."\"description\" : \"" . description . "\", " ."\"param1\" : \"" . param1 . "\", " ."\"param2\" : \"" . param2 . "\", " ."\"resultValueStr\" : \"" . resultValueStr . "\", " ."\"ErrorCodeDec\" : \"" . ErrorCodeDec . "\", " ."\"errorText\" : \"" . errorText . "\", " ."\"adviseText\" : \"" . adviseText . "\", " . "\"integrationLevel\" : \"" . integrationLevel . "\", " . "\"series\" : \"" . series . "\"}"\
| fields werk shortVIN pruefumfangName error\
]\
[ search \
`comment("Alle gestern indizierten Nacharbeiten")`\
  tag=ipsq AKZ=* [makeresults | addinfo | eval indexed_on=strftime(relative_time(info_max_time,"-d@d"), "%Y-%m-%d") | table indexed_on]\
| rename\
    "AKZ" as pruefumfangName,\
    "NA Fehlerart Bezeichnung" as fehlerart, \
    "NA Fehlerlage Bezeichnung" as fehlerlage, \
    "NA Fehlerort Bezeichnung" as fehlerort, \
    "NA Taetigkeit Bezeichnung" as taetigkeit, \
    "NA_Bemerkung" as na_bemerkung, \
    "PR_Bemerkung" as pr_bemerkung,\
    "NA Folgefehler Ursache Nr" as folgefehler_nr,\
    "NA Station Bezeichnung" as station,\
    "Merkmal Bezeichnung" as merkmal,\
    "NA Bel Kostenstelle Nr" as bel_kostenstelle,\
    "NA Bel Meisterbereich Nr" as bel_meisterbereich,\
    "NA Nacharbeitsdauer" as nacharbeitsdauer\
\
`comment("Betrachte auch die Pruefumfaenge, in denen Folgefehler aufgetreten sind, die durch diese Nacharbeit geloest wurden")`\
| eval folgefehler_nr=if(trim(folgefehler_nr)=="",null(),folgefehler_nr)\
| eventstats values(pruefumfangName) as pruefumfangName_folgefehler by folgefehler_nr\
| eval pruefumfangName=coalesce(pruefumfangName_folgefehler,pruefumfangName) | fields - pruefumfangName_folgefehler\
\
`comment("Erzeuge ein einzelnes Feld, dass die Nacharbeit beschreibt")`\
| fillnull value=" " fehlerart fehlerlage fehlerort taetigkeit na_bemerkung pr_bemerkung\
| eval rework = "{\"time\":"._time.","\
."\"fehlerort\"          : \"". replace(replace(fehlerort          ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"fehlerlage\"         : \"". replace(replace(fehlerlage         ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"fehlerart\"          : \"". replace(replace(fehlerart          ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"taetigkeit\"         : \"". replace(replace(taetigkeit         ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"pr_bemerkung\"       : \"". replace(replace(pr_bemerkung       ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"na_bemerkung\"       : \"". replace(replace(na_bemerkung       ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"station\"            : \"". replace(replace(station            ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"merkmal\"            : \"". replace(replace(merkmal            ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"bel_kostenstelle\"   : \"". replace(replace(bel_kostenstelle   ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"bel_meisterbereich\" : \"". replace(replace(bel_meisterbereich ,"\"","\\\""),"(\r?\n)","\\\n") ."\","\
."\"nacharbeitsdauer\"   : \"". replace(replace(nacharbeitsdauer   ,"\"","\\\""),"(\r?\n)","\\\n") ."\"}"\
| fields _time werk shortVIN pruefumfangName rework\
]\
\
`comment("Join der beiden Datenmengen")`\
| stats values(*) as *  by werk shortVIN pruefumfangName\
| search rework=* error=*\
\
`comment("Aufloesung doppelter Eintraege")`\
| stats count by werk shortVIN pruefumfangName rework error\
\
`comment("Herstellen der urspruenglichen Felder")`\
| spath input=error | fields - error\
| spath input=rework | rename time as _time | fields - rework\
\
`comment("Wenn der Fehler einer bekannten Fehlerklasse angehoert ergaenze die Fehlerklassen-ID")`\
| lookup lkup_fehlerklasse pruefumfangName testStepName resultName description param1 param2 resultValueStr ErrorCodeDec errorText adviseText OUTPUTNEW ID as fehlerklasse_id\
| eval fehlerklasse_id=coalesce(fehlerklasse_id,"")

[collect_spur_sturz_sollwerte]
action.email.useNSSubject = 1
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = lkup_spurSturz_sollwerte.csv
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m@m
dispatch.latest_time = now
display.events.fields = ["sourcetype","systemzeit_nullpunkt_HR","param3","resultValueDbl","eventtype","host","source","testVersion"]
display.events.maxLines = 20
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.chartHeight = 664
display.visualizations.charting.chart = scatter
display.visualizations.custom.type = viz_plotly_curvedline_app.toeChamberCurve
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
schedule_window = 15
search = index=iqp_spur_sturz_kurven_sollwerte \
| eval xml=replace(_raw, "\<\?.*?\?\>",""), xml=replace(xml, "xmlns=\".*?\"", "")\
| xpath field=xml "/TToleranceSet" outfield=xml_TTS\
| mvexpand xml_TTS\
| spath input=xml_TTS | fields - TToleranceSet.* | rename TToleranceSet{@*} as TTS_*\
| rex field=TTS_description "^(?P<series>[\d\w]{3})_SC(?P<wheelAlignmentCode>[\d\w]{2})_(?P<axle>[VH]A)_(?P<setting>[\w]+?)_"\
\
| xpath field=xml_TTS "//toleranceLineDefinition" outfield=xml_TLD\
| mvexpand xml_TLD\
| spath input=xml_TLD | fields - toleranceLineDefinition.* | rename toleranceLineDefinition{@*} as TLD_*\
\
| spath input=xml_TLD output=xml_TP path=toleranceLineDefinition | eval xml_TP=split(xml_TP,"<tolerancePoint ")\
| mvexpand xml_TP | search NOT xml_TP="" | eval xml_TP="<tolerancePoint ".xml_TP\
| spath input=xml_TP | fields - tolerancePoint.* | rename tolerancePoint{@*} as TP_*\
\
| fields - xml*\
| table _time series wheelAlignmentCode axle setting TTS_* TLD_* TP_*

[ql_fehlerbilder_30_tage]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 2 3 * * *
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","vehicleState","vinShort","integrationLevel","fehlerart","fehlerlage","fehlerort","taetigkeit","na_bemerkung","pr_bemerkung"]
display.events.type = table
display.general.enablePreview = 0
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.height = 1023
display.visualizations.custom.type = viz_co-occurrence_graph_app.co-occurrence_graph
display.visualizations.custom.viz_co-occurrence_graph_app.co-occurrence_graph.order = group
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
schedule_window = 15
search = | tstats \
  `comment("Grundmenge: alle Fehler der letzten 30 Tage")`\
  values(TestStepResult.shortVIN) as shortVIN from datamodel=APDM_Fehler where (nodename = TestStepResult) groupby TestStepResult.pruefumfangName TestStepResult.testStepName TestStepResult.resultName TestStepResult.description TestStepResult.param1 TestStepResult.param2 TestStepResult.resultValueStr TestStepResult.ErrorCodeDec TestStepResult.errorText TestStepResult.adviseText summariesonly=true\
| rename TestStepResult.* as *\
`comment("Bestimme die Fehlerklassen")`\
| lookup lkup_fehlerklasse pruefumfangName testStepName resultName description param1 param2 resultValueStr ErrorCodeDec errorText adviseText OUTPUTNEW ID | search ID=* | eval ID="ID_".ID | fields ID shortVIN\
`comment("Liste die Fahrzeuge zu jeder Fehlerklasse auf")`\
| stats values(shortVIN) as shortVIN by ID\
`comment("Beachte nur Fehlerklassen, die in min 3 Fahrzeugen vorkamen")`\
| where mvcount(shortVIN)>=15\
`comment("Bilde die Graphstruktur und fuehre die Graphkomponentenanalyse durch")`\
| fit QLearningErrorPatterns threshold=0.5 ID shortVIN | fields - shortVIN

[sum_zfs_entry]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = dtc_summary
action.summary_index.report = sum_zfs_entry
alert.track = 0
cron_schedule = 0 * * * *
dispatch.earliest_time = -13h@h
dispatch.latest_time = -0h@h
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.custom.type = viz_co-occurrence_graph_app.co-occurrence_graph
display.visualizations.show = 0
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = | tstats `comment("Betrachte alle ZFS-Einträge mit dem Zeitpunkt, wann sie zuerst ausgelesen wurden")` \
      earliest(_time)\
      values(TestStepResult.integrationLevel)\
      values(TestStepResult.series)\
      values(TestStepResult.vehicleType)\
      values(TestStepResult.saCode)\
      latest(TestStepResult.werk)\
    from datamodel=APDM_TestStepResults \
    where (nodename = TestStepResult) (TestStepResult.resultValueStr=* NOT TestStepResult.resultValueStr="-") (TestStepResult.resultName="*stat_zfs_string*") [ makeresults | addinfo | eval res="TestStepResult.time>=".relative_time(info_max_time,"-1h@h")." TestStepResult.time<".info_max_time | return $res]\
    groupby TestStepResult.resultValueStr, TestStepResult.shortVIN, nodename prestats=true summariesonly=true \
| rename TestStepResult.* as * \
| eval nodename="DTCEntry" \
| eval dtcEntry=split(replace(replace(replace(resultValueStr,"([0-9A-F]{16})(?=.)","\\1,"),"((FFFFFFFF|00000000)[A-F0-9]{8})",""),"(^,|(?<=,),|,$)",""),",") \
| mvexpand dtcEntry \
| eval dtcTime=substr(dtcEntry,1,8), dtcAddress=substr(dtcEntry,9,2), dtcCode=substr(dtcEntry,11,6) \
| search NOT dtcTime="FFFFFFFF" NOT dtcTime="00000000" (dtcEntry="*") \
\
`comment("Betrachte alle Systemzeitsync-Vorgänge")`\
| tstats earliest(_time)\
    latest(TestStepResult.systemzeit_nullpunkt)\
  from datamodel=APDM_TestStepResults \
  where (nodename = TestStepResult) TestStepResult.param3="ARG;SYSTEMZEIT_LESEN" OR TestStepResult.param3="ARG;START_SYSTIME;STR" OR TestStepResult.param3="ARG;STATUS_SYSTIME" \
    [ makeresults | addinfo | eval res="TestStepResult.time>=".relative_time(info_max_time,"-5h@h")." TestStepResult.time<".info_max_time | return $res]\
  groupby _time span=1s TestStepResult.shortVIN prestats=true append=true summariesonly=true \
| rename TestStepResult.* as *\
| eval nodename=coalesce(nodename,"SystemzeitSync")\
\
`comment("Betrachte alle Prüfumfange mit Start- und Endzeitpunkt")`\
| tstats earliest(_time)\
      values(TestResult.testStand)\
      values(TestResult.pruefumfangName)\
      values(TestResult.pruefEnde)\
    from datamodel=APDM_TestResults \
    where (nodename = TestResult) [ makeresults | addinfo | eval res="TestResult.time>=".relative_time(info_max_time,"-5h@h")." TestResult.time<".info_max_time | return $res]\
    groupby TestResult.shortVIN, source, nodename prestats=true append=true summariesonly=true\
| rename TestResult.* as * \
\
`comment("Betrachte alle in den TestResults angesprochenen SGBDs")`\
| tstats values(TestStepResult.param1) as SGBD\
    from datamodel=APDM_TestStepResults \
    where (nodename = TestStepResult) [inputlookup dtc_translation | dedup SGBD | table SGBD | rename SGBD as TestStepResult.param1 ] [ makeresults | addinfo | eval res="TestStepResult.time>=".relative_time(info_max_time,"-13h@h")." TestStepResult.time<".info_max_time | return $res]\
    groupby source TestStepResult.shortVIN prestats=true append=true summariesonly=true\
| rename TestStepResult.* as *\
| eval nodename=coalesce(nodename,"TestResult")\
\
`comment("Fülle alle Felder, über die gruppiert wird mit - auf")`\
| fillnull source eventtype shortVIN _time dtcTime dtcAddress dtcCode testStand pruefumfangName pruefEnde value="-"\
| stats \
    earliest(_time) as time\
    values(TestStepResult.integrationLevel) as integrationLevel\
    values(TestStepResult.series) as series\
    values(TestStepResult.vehicleType) as vehicleType\
    values(TestStepResult.saCode) as saCode\
    latest(TestStepResult.werk) as werk\
    latest(TestStepResult.systemzeit_nullpunkt) AS systemzeit_nullpunkt \
    values(TestResult.testStand) as testStand\
    values(TestResult.pruefumfangName) as pruefumfangName\
    values(TestResult.pruefEnde) as pruefEnde\
    values(TestStepResult.param1) as SGBD\
  by _time source shortVIN dtcTime dtcAddress dtcCode nodename\
\
| sort 0 time\
| streamstats last(systemzeit_nullpunkt) as systemzeit_nullpunkt by shortVIN\
| search nodename="DTCEntry" OR nodename="TestResult"\
\
`comment("Interpretiere die Zeit des DTCEntries als Echtzeitzeitpunkt")`\
| eval dtcTime=tonumber(dtcTime,16)\
| eval _time=if(nodename="TestResult",time,systemzeit_nullpunkt+dtcTime)\
| dedup dtcTime dtcAddress dtcCode keepempty=true \
\
`comment("Splitte jeden Event in Start und Endzeitpunkt")`\
| eval pruefEnde=if(nodename="DTCEntry", _time, pruefEnde)\
| eval times=split("Start:" + _time + "-Ende:" + pruefEnde, "-")\
| mvexpand times\
| rex field=times "(?<timeTracker>\w*):(?<eventTime>\d*)"\
| eval _time=eventTime\
| fields - eventTime times\
\
`comment("Ordne die DTCEntries an die eigentlich Stelle ein, wann sie aufgetreten sind")`\
| sort 0 _time\
\
\
`comment("Übernehme die Metadaten zum nächstgelegenen vorher ausgeführten Prüfumfang an die einzlenen DTCEinträge")`\
| streamstats \
    last(eval(if(nodename="TestResult", pruefumfangName, null()))) as last_test_pruefumfangName \
    last(eval(if(nodename="TestResult", pruefEnde, null()))) as pruefEnde\
    last(eval(if(nodename="TestResult", _time, null()))) as last_test_testTime\
    last(eval(if(nodename="TestResult", testStand, null()))) as last_test_testStand\
    last(eval(if(nodename="TestResult", errorCount, null()))) as last_test_errorCount\
    last(eval(if(nodename="TestResult", testDuration, null()))) as last_test_testDuration\
    values(eval(if(nodename="TestResult", SGBD, null()))) as SGBD\
    last(eval(if(nodename="TestResult", source, null()))) as last_test_source\
  by shortVIN\
| search nodename=DTCEntry timeTracker="Start" last_test_pruefumfangName=*\
\
`comment("berechne Felder gemäß in oder nach letzter Prüfung")`\
| eval \
  pruefumfangName=if(_time>pruefEnde, "Nach " + last_test_pruefumfangName, last_test_pruefumfangName),\
  testTime=if(_time>pruefEnde, pruefEnde + 0.001, last_test_testTime),\
  testStand=if(_time>pruefEnde, "", last_test_testStand),\
  errorCount=if(_time>pruefEnde, "", last_test_errorCount),\
  testDuration=if(_time>pruefEnde, "", tonumber(last_test_testDuration)),\
  complete=if(_time>pruefEnde, "", if(complete>0, "ja", "nein"))\
| eval Event=if(dtcAddress="FF", "CC", "DTC"),\
       SGBD=if(Event="CC","CheckControl",SGBD)\
       \
`comment("reduziere auf wirklichen SGBD und hole DTC Beschreibung")`\
| lookup \
      dtc_translation DTC_CODE_HEX as dtcCode \
      SG_ADDRESS_HEX as dtcAddress\
      SGBD as SGBD \
    OUTPUT \
      DESCRIPTIONDE as dtcText\
      SGBD as dtcSGBD\
| rename last_test_source as lts\
| fields - DTCEntry_* - SystemzeitSync_* - TestResult_* - TestStepResult_* - SGBD - date* - last_test* - nodename - timeTracker \
| rename lts as last_test_source\
\
`comment("joine APDM_OrderData_Events zu DTCEntry über VIN")`\
| join type=left  shortVIN\
  [\
    | tstats \
        latest(_time) as _time\
        count\
      from datamodel=APDM_OrderData_Events \
      where (nodename = OrderData) (OrderData.countryVariant="*") [ makeresults | addinfo | eval earliest=info_min_time-14*24*60*60 | eval earliest=if(earliest>0,earliest,0) | eval latest=info_max_time | table earliest latest | format "(" "" "" "" "" ")"]\
      groupBy OrderData.shortVIN OrderData.countryVariant summariesonly=true\
    | rename OrderData.* as *\
    | sort 0 - _time\
    | head 49999\
  ]

[apdm_test_result_field_definition]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","vehicleState","vinShort","integrationLevel","fehlerart","fehlerlage","fehlerort","taetigkeit","na_bemerkung","pr_bemerkung","NA Nacharbeitsdauer","indexed_on","wheelAlignmentCode","dtcCode","dtcTime"]
display.events.type = raw
display.general.enablePreview = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = viz_jstree_app.jstree
display.visualizations.show = 0
display.visualizations.type = custom
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = | inputlookup lkup_xml_schema_definitions where name=standardResultData version=01.25.00 \
| `prepare_for_xpath(xsd)`\
| fields xsd\
| xpath field=xsd outfield=attr "/schema/element[@name='fileInfo' or @name='vehicleInfo' or @name='testInfo']/complexType/attribute" | fields attr\
| mvexpand attr\
| xpath field=attr outfield=name "/attribute/@name"\
| xpath field=attr outfield=use "/attribute/@use" \
| xpath field=attr outfield=documentation "/attribute/annotation/documentation"\
| fields name use documentation

[apdm_test_step_result_field_definition]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","vehicleState","vinShort","integrationLevel","fehlerart","fehlerlage","fehlerort","taetigkeit","na_bemerkung","pr_bemerkung","NA Nacharbeitsdauer","indexed_on","wheelAlignmentCode","dtcCode","dtcTime"]
display.events.type = raw
display.general.enablePreview = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = viz_jstree_app.jstree
display.visualizations.show = 0
display.visualizations.type = custom
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = | inputlookup lkup_xml_schema_definitions where name=standardResultData version=01.25.00 \
| `prepare_for_xpath(xsd)`\
| fields xsd\
\
| xpath field=xsd outfield=attr "/schema/element[@name='testInfo']/complexType/sequence/element/complexType/attribute" | fields attr\
| mvexpand attr\
| xpath field=attr outfield=name "/attribute/@name"\
| xpath field=attr outfield=use "/attribute/@use" \
| xpath field=attr outfield=documentation "/attribute/annotation/documentation"\
| fields name use documentation

[apdm_order_data_field_definition]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","vehicleState","vinShort","integrationLevel","fehlerart","fehlerlage","fehlerort","taetigkeit","na_bemerkung","pr_bemerkung","NA Nacharbeitsdauer","indexed_on","wheelAlignmentCode","dtcCode","dtcTime"]
display.events.type = raw
display.general.enablePreview = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = viz_jstree_app.jstree
display.visualizations.show = 0
display.visualizations.type = custom
request.ui_dispatch_app = iqp
request.ui_dispatch_view = search
search = | inputlookup lkup_xml_schema_definitions where name=orderData version=01.28.00 \
| `prepare_for_xpath(xsd)`\
| fields xsd\
\
| xpath field=xsd outfield=attr "/schema/element[@name='orderData']/complexType/attribute" | fields attr\
| mvexpand attr\
| xpath field=attr outfield=name "/attribute/@name"\
| xpath field=attr outfield=use "/attribute/@use" \
| xpath field=attr outfield=documentation "/attribute/annotation/documentation[@lang='de']"\
| fields name use documentation

